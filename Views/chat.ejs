<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>chat page</title>
    <link rel="stylesheet" href="/chat.css">
 
 <script src="https://cdn.socket.io/4.1.2/socket.io.min.js"></script>

</head>
<body>
 <h1>Guessss Here!!!!</h1>
 <div class="container1">
    <canvas id="drawingCanvas" width="800" height="600"></canvas>
    <div>
        <label for="shapeSelector">Select Shape:</label>
        <select id="shapeSelector">
            <option value="freehand">Freehand</option>
            <option value="circle">Circle</option>
            <option value="rectangle">Rectangle</option>
            <option value="ellipse">Ellipse</option>
        </select>
        <label for="colorPicker">Color:</label>
        <input type="color" id="colorPicker" value="#000000">
    </div>
    
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    <script>
        const canvas = document.getElementById('drawingCanvas');
        const context = canvas.getContext('2d');
        const socket1 = io();
    
        context.lineWidth = 2;
        context.lineCap = 'round';
        context.strokeStyle = '#000';
    
        let isDrawing = false;
        let startX, startY;
    
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);
    
        function startDrawing(e) {
            isDrawing = true;
            startX = e.clientX - canvas.offsetLeft;
            startY = e.clientY - canvas.offsetTop;
    
            context.beginPath();
            context.moveTo(startX, startY);
    
            const shape = document.getElementById('shapeSelector').value;
            const color = document.getElementById('colorPicker').value;
    
            socket1.emit('startDrawing', { x: startX, y: startY, shape, color });
        }
    
        function draw(e) {
            if (!isDrawing) return;
    
            const x = e.clientX - canvas.offsetLeft;
            const y = e.clientY - canvas.offsetTop;
    
            const shape = document.getElementById('shapeSelector').value;
            const color = document.getElementById('colorPicker').value;
    
            if (shape === 'freehand') {
                context.lineTo(x, y);
                context.stroke();
            } else {
                drawShape(startX, startY, x, y, shape, color);
            }
    
            socket1.emit('drawing', { x, y, shape, color });
        }
    
        function drawShape(startX, startY, endX, endY, shape, color) {
            context.clearRect(0, 0, canvas.width, canvas.height);
    
            switch (shape) {
                case 'circle':
                    drawCircle(startX, startY, Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2)), color);
                    break;
                case 'rectangle':
                    drawRectangle(startX, startY, endX - startX, endY - startY, color);
                    break;
                case 'ellipse':
                    drawEllipse(startX, startY, endX, endY, color);
                    break;
                default:
                    break;
            }
        }
    
        function drawCircle(x, y, radius, color) {
            context.beginPath();
            context.arc(x, y, radius, 0, 2 * Math.PI);
            context.fillStyle = color;
            context.fill();
        }
    
        function drawRectangle(x, y, width, height, color) {
            context.fillStyle = color;
            context.fillRect(x, y, width, height);
        }
    
        function drawEllipse(x, y, endX, endY, color) {
            const radiusX = Math.abs(endX - x) / 2;
            const radiusY = Math.abs(endY - y) / 2;
            context.beginPath();
            context.ellipse(x + radiusX, y + radiusY, radiusX, radiusY, 0, 0, 2 * Math.PI);
            context.fillStyle = color;
            context.fill();
        }
    
        function stopDrawing() {
            if (isDrawing) {
                isDrawing = false;
                context.closePath();
            }
        }
    
        socket1.on('startDrawing', (data) => {
            startX = data.x;
            startY = data.y;
    
            context.beginPath();
            context.moveTo(startX, startY);
        });
    
        socket1.on('drawing', (data) => {
            const { x, y, shape, color } = data;
            if (shape === 'freehand') {
                context.lineTo(x, y);
                context.stroke();
            } else {
                drawShape(startX, startY, x, y, shape, color);
            }
        });
    </script>
    </div>
    <div class="content1">
    
    <div class="container">
        <div id="messages" class ="chat"></div>
        <div class="sendchat">
            <input type="text" id="message" placeholder="Guess the paint"/>
            <button id="sendBtn">send</button>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const sendBtn = document.getElementById("sendBtn");
        const messageInput = document.getElementById("message");
        const allMessages = document.getElementById('messages');
        let scores = {};
        const wordsToGuess = ['tree', 'arrow', 'saturn', 'wheel', 'apple'];
        let guessedWords = [];

        socket.on("message", (data) => {
            const { user, message } = data;
            const p = document.createElement('p');
            p.innerText = `${user}: ${message}`;
            allMessages.appendChild(p);

            const guessedWord = getGuessedWord(message);
            if (guessedWord) {
                if (!guessedWords.includes(guessedWord)) {
                    guessedWords.push(guessedWord);

                    if (guessedWords.length === wordsToGuess.length) {
                        // All words are guessed, determine the winner
                        const winner = getWinner();
                        alert(`Game over! Winner: ${winner}`);
                    }

                    // Assign 50 points for a correct guess
                    scores[user] = (scores[user] || 0) + 50;

                    // Display the updated score in the message box
                    messageInput.value = `Your score: ${scores[user]} points`;

                    // Display the updated leaderboard
                    updateLeaderboard();
                } else {
                    // Word already guessed, notify the user
                    messageInput.value = "You already guessed that word!";
                }
            }
        });

        sendBtn.addEventListener("click", () => {
            const message = messageInput.value;
            const user = getUserType(message);

            socket.emit("user-message", { user, message });
            messageInput.value = "";
        });

        function getUserType(message) {
            // Add your logic to determine user type based on a fixed word
            // For example, if the message contains the word "paint", consider it as a specific user type
            return message.toLowerCase().includes("paint") ? "Painter" : "Regular";
        }

        function getGuessedWord(message) {
            // Check if the message contains any of the specified words
            const words = message.toLowerCase().split(' ');
            for (const word of words) {
                if (wordsToGuess.includes(word)) {
                    return word;
                }
            }
            return null;
        }

        function updateLeaderboard() {
            // Display the updated leaderboard
            const leaderboard = document.createElement('div');
            leaderboard.innerHTML = "<h2>Leaderboard</h2>";

            // Sort and display the leaderboard
            const sortedLeaderboard = Object.entries(scores).sort((a, b) => b[1] - a[1]);

            sortedLeaderboard.forEach(([user, score]) => {
                const leaderboardItem = document.createElement('p');
                leaderboardItem.innerText = `${user}: ${score} points`;
                leaderboard.appendChild(leaderboardItem);
            });

            // Update the leaderboard container
            const container = document.getElementById('leaderboard');
            container.innerHTML = '';
            container.appendChild(leaderboard);
        }

        function getWinner() {
            // Determine the winner based on the highest score
            const winner = Object.entries(scores).reduce((prev, current) => {
                return prev[1] > current[1] ? prev : current;
            }, []);

            return winner[0];
        }
    </script>
    </div>
   

</body>
</html>
